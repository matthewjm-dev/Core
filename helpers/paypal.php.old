<?php // PayPal Instant Payment Notification

class ipsCore_paypal
{
    protected $sandbox = false; // Indicates if the sandbox endpoint is used.
    protected $use_local_certs = true; // Indicates if the local certificates are used.

    protected $string_valid = 'VERIFIED'; // Response from PayPal indicating validation was successful
    protected $string_invalid = 'INVALID'; // Response from PayPal indicating validation failed

    protected $url_return;
    protected $url_cancel;
    protected $url_notify;
    
    protected $url_request_live = 'https://www.paypal.com/cgi-bin/webscr';
    protected $url_request_sandbox = 'https://www.sandbox.paypal.com/cgi-bin/webscr';

    protected $url_verify = 'https://ipnpb.paypal.com/cgi-bin/webscr'; // Production Postback URL
    protected $url_verify_sandbox = 'https://ipnpb.sandbox.paypal.com/cgi-bin/webscr'; // Sandbox Postback URL

    // Construct

    public function __construct($urls = false)
    {
        if (!$urls) {
            $urls = [
                'return' => ipsCore::$app->get_uri_slashed() . '/paypal/response_return/',
                'cancel' => ipsCore::$app->get_uri_slashed() . '/paypal/response_canel/',
                'notify' => ipsCore::$app->get_uri_slashed() . '/paypal/response_notify/',
            ];
        }

        if (isset($urls['return'])) {
            $this->url_return = $urls['return'];
        } else {
            ipsCore::add_error('Paypal Return URL is required', true);
        }

        if (isset($urls['cancel'])) {
            $this->url_cancel = $urls['cancel'];
        } else {
            ipsCore::add_error('Paypal Cancel URL is required', true);
        }

        if (isset($urls['notify'])) {
            $this->url_notify = $urls['notify'];
        } else {
            ipsCore::add_error('Paypal Notify URL is required', true);
        }
    }

    /**
     * Sets the IPN verification to sandbox mode (for use when testing,
     * should not be enabled in production).
     * @return void
     */
    public function use_sandbox()
    {
        $this->sandbox = true;
    }

    /**
     * Sets curl to use php curl's built in certs (may be required in some
     * environments).
     * @return void
     */
    public function use_certs()
    {
        $this->use_local_certs = false;
    }

    /**
     * Determine endpoint to post the payment request data to.
     *
     * @return string
     */
    public function get_url_request()
    {
        if ($this->sandbox) {
            return $this->url_request_sandbox;
        } else {
            return $this->url_request;
        }
    }

    /**
     * Determine endpoint to post the verification data to.
     *
     * @return string
     */
    public function get_url_verify()
    {
        if ($this->sandbox) {
            return $this->url_verify_sandbox;
        } else {
            return $this->url_verify;
        }
    }

    /**
     * Request Payment Function
     * Sends a payment request to PayPal using the data given to this function
     *
     * @return bool
     * @throws Exception
     */
    public function send_payment_request($data) {

    }

    /**
     * Verification Function
     * Sends the incoming post data back to PayPal using the cURL library.
     *
     * @return bool
     * @throws Exception
     */
    public function verify_ipn()
    {
        if (!count($_POST)) {
            throw new Exception("Missing POST Data");
        }

        $raw_post_data = file_get_contents('php://input');
        $raw_post_array = explode('&', $raw_post_data);
        $post_data = [];

        foreach ($raw_post_array as $keyval) {
            $keyval = explode('=', $keyval);
            if (count($keyval) == 2) {
                // Since we do not want the plus in the datetime string to be encoded to a space, we manually encode it.
                if ($keyval[0] === 'payment_date') {
                    if (substr_count($keyval[1], '+') === 1) {
                        $keyval[1] = str_replace('+', '%2B', $keyval[1]);
                    }
                }
                $post_data[$keyval[0]] = urldecode($keyval[1]);
            }
        }

        // Build the body of the verification post request, adding the _notify-validate command.
        $req = 'cmd=_notify-validate';
        $get_magic_quotes_exists = false;
        if (function_exists('get_magic_quotes_gpc')) {
            $get_magic_quotes_exists = true;
        }

        foreach ($post_data as $key => $value) {
            if ($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) {
                $value = urlencode(stripslashes($value));
            } else {
                $value = urlencode($value);
            }
            $req .= "&$key=$value";
        }

        // Post the data back to PayPal, using curl. Throw exceptions if errors occur.
        $ch = curl_init($this->get_url_verify());
        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $req);
        curl_setopt($ch, CURLOPT_SSLVERSION, 6);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);

        // This is often required if the server is missing a global cert bundle, or is using an outdated one.
        if ($this->use_local_certs) {
            curl_setopt($ch, CURLOPT_CAINFO, __DIR__ . "/cert/cacert.pem");
        }

        curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'User-Agent: PHP-IPN-Verification-Script',
            'Connection: Close',
        ));

        $res = curl_exec($ch);

        if (!($res)) {
            $errno = curl_errno($ch);
            $errstr = curl_error($ch);
            curl_close($ch);
            throw new Exception("cURL error: [$errno] $errstr");
        }

        $info = curl_getinfo($ch);
        $http_code = $info['http_code'];

        if ($http_code != 200) {
            throw new Exception("PayPal responded with http code $http_code");
        }

        curl_close($ch);

        // Check if PayPal verifies the IPN data, and if so, return true.
        if ($res == $this->string_valid) {
            return true;
        } else {
            return false;
        }
    }
}
